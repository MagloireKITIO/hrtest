"""
Django settings for horilla project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from os.path import join
from pathlib import Path

from django.contrib.messages import constants as messages
from recruitment.utils.google_settings import DEFAULT_SETTINGS
from recruitment.utils.google_settings import GoogleSettings


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/
SECRET_KEY = 'django-insecure-2#p9z0-d=39&qbu#&f1p6m=2+j!a4_n_r9q%wz192hfwva&24^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

BASE_URL = 'http://localhost:8000'

ALLOWED_HOSTS = ['*']

CSRF_TRUSTED_ORIGINS = [
    'https://c7da-129-0-53-50.ngrok-free.app',
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

CORS_ALLOWED_ORIGINS = [
    'https://c7da-129-0-53-50.ngrok-free.app',
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "notifications",
    "mathfilters",
    "corsheaders",
    "simple_history",
    "django_filters",  
    "base",
    "recruitment",
    "employee",
    "leave",
    "pms",
    "onboarding",
    "asset",
    "attendance",
    "payroll",
    "widget_tweaks",
    "django_apscheduler",
    "storages",
    'candidate_portal.apps.CandidatePortalConfig',
]


APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"

APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "corsheaders.middleware.CorsMiddleware",  
    "django.middleware.common.CommonMiddleware",  
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    'recruitment.middleware.PublicAreaLanguageMiddleware',
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "horilla.horilla_middlewares.ThreadLocalMiddleware",
    "base.middleware.CompanyMiddleware",
    "base.middleware.PasswordChangeMiddleware",

]

HTML_MINIFY = True
KEEP_COMMENTS_ON_MINIFYING = False
SESSION_COOKIE_AGE = 1500  # 25 minutes


ROOT_URLCONF = "horilla.urls"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [
            BASE_DIR / "templates",  # Répertoire global pour les templates
        ],
        'APP_DIRS': False,  # Désactivation pour améliorer la performance
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.static',
                'candidate_portal.context_processors.profile_completion',
            ],
            'loaders': [
                ('django.template.loaders.cached.Loader', [  # Utilisation du cache
                    'django.template.loaders.filesystem.Loader',
                    'django.template.loaders.app_directories.Loader',
                ]),
            ],
        },
    },
]

WSGI_APPLICATION = "horilla.wsgi.application"


# Database test

DATABASES = {
    'default': {
       'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
# Password validation


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'horilla.password_validation.ComplexPasswordValidator', 
    },
]


# hachage du mots de mots de passe 
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',  # Uses SHA256 by default
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.ScryptPasswordHasher',
]

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"
# Increase the data upload limit to 10 MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10 MB

# Increase the file upload limit to 10 MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10 MB

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

MESSAGE_TAGS = {
    messages.DEBUG: "oh-alert--warning",
    messages.INFO: "oh-alert--info",
    messages.SUCCESS: "oh-alert--success",
    messages.WARNING: "oh-alert--warning",
    messages.ERROR: "oh-alert--danger",
}

LOGIN_URL = "/login"


SIMPLE_HISTORY_REVERT_DISABLED = True


DJANGO_NOTIFICATIONS_CONFIG = {
    "USE_JSONFIELD": True,
    "SOFT_DELETE": True,
    "USE_WATCHED": True,
    "NOTIFICATIONS_STORAGE": "notifications.storage.DatabaseStorage",
    "TEMPLATE": "notifications.html",  
}

X_FRAME_OPTIONS = "SAMEORIGIN"

LANGUAGES = (
    ("en", "English (US)"),
    ("fr", "France"),
)

LOCALE_PATHS = [
    join(BASE_DIR, "horilla", "locale"),
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "fr-fr"
TIME_ZONE = "Africa/Douala"

USE_I18N = True

USE_L10N = True

USE_TZ = True

EMAIL_USE_TLS = True 
EMAIL_HOST = 'smtp.gmail.com' 
EMAIL_PORT = '587'
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''

# Production settings

# Paramètres de sécurité conditionnels
if 'WEBSITE_HOSTNAME' in os.environ:
    # En production (Azure)
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
else:
    # En développement local
    SECURE_BROWSER_XSS_FILTER = False
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = None
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
    SECURE_CONTENT_TYPE_NOSNIFF = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_PROXY_SSL_HEADER = None

# Google Forms settings
GOOGLE_FORMS_CREDENTIALS = os.path.join(BASE_DIR, 'service-account.json')

# Google Calendar Settings
if 'WEBSITE_HOSTNAME' in os.environ:
    # Production settings from environment variables
    GOOGLE_CLIENT_ID = os.environ['GOOGLE_CLIENT_ID']
    GOOGLE_PROJECT_ID = os.environ['GOOGLE_PROJECT_ID']
    GOOGLE_CLIENT_SECRET = os.environ['GOOGLE_CLIENT_SECRET']
    GOOGLE_REDIRECT_URIS = [os.environ['GOOGLE_REDIRECT_URI']]
else:
    # Development settings (importés automatiquement de google_settings.py)
    
    GOOGLE_CLIENT_ID = DEFAULT_SETTINGS['GOOGLE_CLIENT_ID']
    GOOGLE_PROJECT_ID = DEFAULT_SETTINGS['GOOGLE_PROJECT_ID']
    GOOGLE_CLIENT_SECRET = DEFAULT_SETTINGS['GOOGLE_CLIENT_SECRET']
    GOOGLE_REDIRECT_URIS = DEFAULT_SETTINGS['GOOGLE_REDIRECT_URIS']

# Chargement des credentials Google

GOOGLE_CALENDAR_CREDENTIALS = GoogleSettings.get_credentials()

GOOGLE_OAUTH_SETTINGS = {
    'flow_state': {},  # Pour stocker l'état du flow entre les requêtes
}

if 'WEBSITE_HOSTNAME' in os.environ:
    DEEPSEEK_API_KEY = os.environ['DEEPSEEK_API_KEY']
else:
    DEEPSEEK_API_KEY = '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'
# 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
# Ai analysis
USE_AZURE_STORAGE = False




