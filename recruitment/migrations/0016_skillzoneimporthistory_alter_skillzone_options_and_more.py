# Generated by Django 5.1.6 on 2025-05-29 14:30

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0004_alter_announcement_is_active_and_more'),
        ('employee', '0007_alter_actiontype_block_option_and_more'),
        ('recruitment', '0015_candidate_privacy_policy_accepted_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SkillZoneImportHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Est actif')),
                ('import_date', models.DateTimeField(auto_now_add=True)),
                ('total_cvs', models.IntegerField(default=0)),
                ('processed_cvs', models.IntegerField(default=0)),
                ('successful_classifications', models.IntegerField(default=0)),
                ('failed_classifications', models.IntegerField(default=0)),
                ('new_zones_created', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('error_log', models.JSONField(blank=True, default=list)),
            ],
            options={
                'verbose_name': 'Skill Zone Import History',
                'verbose_name_plural': 'Skill Zone Import Histories',
                'ordering': ['-import_date'],
            },
        ),
        migrations.AlterModelOptions(
            name='skillzone',
            options={'verbose_name': 'Skill Zone', 'verbose_name_plural': 'Skill Zones'},
        ),
        migrations.AlterModelOptions(
            name='skillzonecandidate',
            options={'verbose_name': 'Skill Zone Candidate', 'verbose_name_plural': 'Skill Zone Candidates'},
        ),
        migrations.AddField(
            model_name='aiconfiguration',
            name='enable_auto_skillzone_creation',
            field=models.BooleanField(default=True, help_text='Allow AI to automatically create new skill zones when needed', verbose_name='Enable Auto SkillZone Creation'),
        ),
        migrations.AddField(
            model_name='aiconfiguration',
            name='max_zones_per_candidate',
            field=models.IntegerField(default=3, help_text='Maximum number of skill zones a candidate can be classified into', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Max Zones per Candidate'),
        ),
        migrations.AddField(
            model_name='aiconfiguration',
            name='min_confidence_for_auto_classification',
            field=models.FloatField(default=0.7, help_text='Minimum confidence score required for automatic classification', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Minimum Confidence for Auto Classification'),
        ),
        migrations.AddField(
            model_name='aiconfiguration',
            name='skillzone_classification_prompt',
            field=models.TextField(default='IMPORTANT: Répondez uniquement avec un JSON valide sans texte additionnel.\n\n        Vous êtes un expert RH qui analyse des CV pour les classer dans des zones de compétences appropriées.\n\n        Zones de compétences disponibles:\n        {}\n\n        Analysez le CV et:\n        1. Identifiez les zones de compétences correspondantes (max 3)\n        2. Calculez un score de confiance pour chaque zone (0-1)\n        3. Si aucune zone ne correspond bien (score < 0.5), suggérez une nouvelle zone\n\n        Format JSON requis:\n        {{\n            "matched_zones": [\n                {{\n                    "zone_id": "ID ou nom de la zone",\n                    "confidence": 0.85,\n                    "reasons": ["Raison 1", "Raison 2"]\n                }}\n            ],\n            "suggested_new_zone": {{\n                "name": "Nom suggéré",\n                "description": "Description détaillée",\n                "keywords": ["mot-clé1", "mot-clé2", ...],\n                "typical_skills": ["compétence1", "compétence2", ...]\n            }},\n            "extracted_skills": ["skill1", "skill2", ...],\n            "professional_level": "junior|intermediate|senior|expert"\n        }}', help_text='Prompt for classifying candidates into skill zones', verbose_name='SkillZone Classification Prompt'),
        ),
        migrations.AddField(
            model_name='aiconfiguration',
            name='skillzone_embedding_prompt',
            field=models.TextField(default="Générez une représentation sémantique dense de cette zone de compétences.\n\n        Zone: {}\n        Description: {}\n        Mots-clés: {}\n\n        Créez un résumé sémantique riche incluant:\n        - Le domaine principal\n        - Les compétences techniques associées\n        - Les rôles typiques\n        - Les technologies pertinentes\n        - Le niveau d'expertise requis", help_text='Prompt for generating embeddings for skill zones', verbose_name='SkillZone Embedding Prompt'),
        ),
        migrations.AddField(
            model_name='skillzone',
            name='ai_embedding',
            field=models.JSONField(blank=True, help_text='Vector embedding for semantic search', null=True, verbose_name='AI Embedding'),
        ),
        migrations.AddField(
            model_name='skillzone',
            name='auto_generated',
            field=models.BooleanField(default=False, help_text='Indicates if this skill zone was automatically created by AI', verbose_name='Auto Generated'),
        ),
        migrations.AddField(
            model_name='skillzone',
            name='keywords',
            field=models.JSONField(blank=True, default=list, help_text='Keywords associated with this skill zone for search and classification', verbose_name='Keywords'),
        ),
        migrations.AddField(
            model_name='skillzone',
            name='typical_skills',
            field=models.JSONField(blank=True, default=list, help_text='List of typical skills for this zone', verbose_name='Typical Skills'),
        ),
        migrations.AddField(
            model_name='skillzonecandidate',
            name='auto_classified',
            field=models.BooleanField(default=False, help_text='Was this classification done automatically by AI?', verbose_name='Auto Classified'),
        ),
        migrations.AddField(
            model_name='skillzonecandidate',
            name='classification_details',
            field=models.JSONField(blank=True, help_text='AI analysis details for this classification', null=True, verbose_name='Classification Details'),
        ),
        migrations.AddField(
            model_name='skillzonecandidate',
            name='confidence_score',
            field=models.FloatField(blank=True, help_text='AI confidence score for this classification (0-1)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Confidence Score'),
        ),
        migrations.AddField(
            model_name='skillzonecandidate',
            name='source_tag',
            field=models.CharField(choices=[('manual', 'Manual'), ('application', 'Job Application'), ('import', 'Bulk Import'), ('ai_suggestion', 'AI Suggestion')], default='manual', help_text='How this candidate was added to the skill zone', max_length=50, verbose_name='Source'),
        ),
        migrations.AddIndex(
            model_name='skillzone',
            index=models.Index(fields=['auto_generated', 'is_active'], name='skillzone_auto_active_idx'),
        ),
        migrations.AddIndex(
            model_name='skillzonecandidate',
            index=models.Index(fields=['source_tag', 'auto_classified'], name='skillzone_cand_source_idx'),
        ),
        migrations.AddField(
            model_name='skillzoneimporthistory',
            name='company_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.company', verbose_name='Company'),
        ),
        migrations.AddField(
            model_name='skillzoneimporthistory',
            name='created_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Créé par'),
        ),
        migrations.AddField(
            model_name='skillzoneimporthistory',
            name='initiated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='skillzone_imports', to='employee.employee'),
        ),
        migrations.AddField(
            model_name='skillzoneimporthistory',
            name='modified_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='Modified By'),
        ),
    ]
